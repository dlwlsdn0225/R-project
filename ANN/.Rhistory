num <- 100
num2 <- 20
num1 <- 100
num2 <- 20
result <- num1 * num2
result
result <- num1 //num2
result <- num1%num2
result <- num1 / num2
result1 <- num1 / num2
result1
result <- num1%%num2
result2 <- num1%%num2
result2
#논리연산자
logical <- num1 >= 50  & num2 <= 10
logical
#조건문
x <- 50; y <- 4; z <- x*y
setwd("~/Google 드라이브/대학교/2021년 1학기(3학년2학기)/다변량분석/5차과제")
#Artificial Neural Network
library(nnet)
library(ggplot2)
#------Q1. numeric이 아닌 변수들 확인 및 boxplot
earthq<- read.csv("earthq.csv")
str(earthq)
target_idx <- 40
earthq_target <- as.factor(earthq[,target_idx])
earthq1 <- cbind(earthq[,-c(target_idx)],earthq_target)
char_idx <- c(9:15,27)
char_earthq<- earthq1[,char_idx]
char_earthq
for (i in 1:length(char_earthq)){
char_var <- char_earthq[,i]
box <- ggplot(earthq1, aes(x=char_var))+geom_bar()
print(box+ggtitle(char_var[i]))
}
#-----Q2. 1-hot encoding 이진형 명목형 변수들로 바꿔주기
char <- names(char_earthq)
dummy <- data.frame(0)
for( i in 1:length(char_earthq)){
x <- class.ind(char_earthq[,i])
for(j in 1:ncol(x)){
colnames(x)[j] <- paste("dummy-",char[i],"-",colnames(x)[j])
}
dummy <- cbind(dummy, x)
}
dummy <- dummy[,-1]
dummy
#데이터 셋 분할해주기    trn <-150000, val <- 50000, tst <- 60601
#데이터 전처리
earthq_data <- cbind(earthq1[,-c(1,char_idx)],dummy)
str(earthq_data)
#target
target_idx2<-31
earthq_data_target <-earthq_data[target_idx2]
earthq_data_target
#input 값들 설정
#이진형태
binary_idx <- c(8:18,20:30)
binary_input <- lapply(earthq_data[,binary_idx],factor)
#수치형
numeric_idx <- c(1:7,19)
numeric_data <-earthq_data[,numeric_idx]
numeric_input <- scale(numeric_data, center=TRUE, scale=TRUE)
#dummy 변수
dummy_input <- earthq_data[,-c(target_idx2,binary_idx,numeric_idx)]
#최종 dataframe 생성
earthq_input <- data.frame(numeric_input, binary_input, dummy_input)
earthq_final <- data.frame(earthq_input,earthq_data_target)
input_idx <- c(1:68)
target_idx <- 69
#데이터 분할
set.seed(12345)
trn_idx <- sample(1:nrow(earthq_final),150000)
val_idx <- sample(1:nrow(earthq_final),50000)
tst_idx <- sample(1:nrow(earthq_final),60601)
earthq_trn <- data.frame(earthq_final[trn_idx,])
earthq_val <- data.frame(earthq_final[val_idx,])
earthq_tst <- data.frame(earthq_final[tst_idx,])
#예측률평가
#Performance eval_fold
perf_eval_multi <- function(cm){
#Simple Accuracy
ACC = sum(diag(cm))/sum(cm)
#Balanced Correction Rate
BCR = 1
for(i in 1:dim(cm)[1]){
BCR = BCR * (cm[i,i]/sum(cm[i,]))
}
BCR = BCR^(1/dim(cm)[1])
return(c(ACC,BCR))
}
#평가 matrix 생성
perf_table <- matrix(0, nrow = 2, ncol = 4)
colnames(perf_table) <- c("ANN","ANN(GA)","Decision TREE","MLR")
rownames(perf_table) <- c("Accuracy","BCR")
perf_table
#---------Q3
#ANN 훈련
input_idx <- c(1:68)
target_idx <- 69
ann_trn_input <- earthq_trn[,input_idx]
ann_trn_target <- class.ind(earthq_trn[,-input_idx])
ann_val_input <- earthq_val[,input_idx]
#best number of nodes
nH=seq(from=5, to=30, by=5)
maxit=seq(from=100, to=500, by=100)
val_perf <- matrix(0, 30, 4)
temp <-1
for( i in 1:length(nH)){
for(j in 1:length(maxit)){
cat("Training ANN: number of hidden nodes:", nH[i],",maxit:", maxit[j],"\n")
eval_fold <- c()
#Training model
trn_input <- ann_trn_input
trn_target <- ann_trn_target
tmp_nnet <- nnet(trn_input, trn_target, size=nH[i], maxit=maxit[j],silent = TRUE,MaxNWts = 10000)
#eval_fold
val_input <- ann_val_input
val_target <- ann_val_target
eval_fold <- rbind(eval_fold, cbind(max.col(val_target),max.col(predict(tmp_nnet,val_input))))
#Confusion matrix
cfm <- matrix(0,nrow = 3, ncol = 3)
cfm[1,1] <- length(which(eval_fold[,1] == 1 & eval_fold[,2] == 1))
cfm[1,2] <- length(which(eval_fold[,1] == 1 & eval_fold[,2] == 2))
cfm[1,3] <- length(which(eval_fold[,1] == 1 & eval_fold[,2] == 3))
cfm[2,1] <- length(which(eval_fold[,1] == 2 & eval_fold[,2] == 1))
cfm[2,2] <- length(which(eval_fold[,1] == 2 & eval_fold[,2] == 2))
cfm[2,3] <- length(which(eval_fold[,1] == 2 & eval_fold[,2] == 3))
cfm[3,1] <- length(which(eval_fold[,1] == 3 & eval_fold[,2] == 1))
cfm[3,2] <- length(which(eval_fold[,1] == 3 & eval_fold[,2] == 2))
cfm[3,3] <- length(which(eval_fold[,1] == 3 & eval_fold[,2] == 3))
val_perf[temp,1] <-nH[i]
val_perf[temp,2] <-maxit[j]
val_perf[temp,3:4] <- t(perf_eval_multi(cfm))
temp <- temp + 1
}
}
#---------Q3
#ANN 훈련
input_idx <- c(1:68)
target_idx <- 69
ann_trn_input <- earthq_trn[,input_idx]
ann_trn_target <- class.ind(earthq_trn[,-input_idx])
ann_val_input <- earthq_val[,input_idx]
ann_val_target <- class.ind(earthq_val[,-input_idx])
#best number of nodes
nH=seq(from=5, to=30, by=5)
maxit=seq(from=100, to=500, by=100)
val_perf <- matrix(0, 30, 4)
temp <-1
for( i in 1:length(nH)){
for(j in 1:length(maxit)){
cat("Training ANN: number of hidden nodes:", nH[i],",maxit:", maxit[j],"\n")
eval_fold <- c()
#Training model
trn_input <- ann_trn_input
trn_target <- ann_trn_target
tmp_nnet <- nnet(trn_input, trn_target, size=nH[i], maxit=maxit[j],silent = TRUE,MaxNWts = 10000)
#eval_fold
val_input <- ann_val_input
val_target <- ann_val_target
eval_fold <- rbind(eval_fold, cbind(max.col(val_target),max.col(predict(tmp_nnet,val_input))))
#Confusion matrix
cfm <- matrix(0,nrow = 3, ncol = 3)
cfm[1,1] <- length(which(eval_fold[,1] == 1 & eval_fold[,2] == 1))
cfm[1,2] <- length(which(eval_fold[,1] == 1 & eval_fold[,2] == 2))
cfm[1,3] <- length(which(eval_fold[,1] == 1 & eval_fold[,2] == 3))
cfm[2,1] <- length(which(eval_fold[,1] == 2 & eval_fold[,2] == 1))
cfm[2,2] <- length(which(eval_fold[,1] == 2 & eval_fold[,2] == 2))
cfm[2,3] <- length(which(eval_fold[,1] == 2 & eval_fold[,2] == 3))
cfm[3,1] <- length(which(eval_fold[,1] == 3 & eval_fold[,2] == 1))
cfm[3,2] <- length(which(eval_fold[,1] == 3 & eval_fold[,2] == 2))
cfm[3,3] <- length(which(eval_fold[,1] == 3 & eval_fold[,2] == 3))
val_perf[temp,1] <-nH[i]
val_perf[temp,2] <-maxit[j]
val_perf[temp,3:4] <- t(perf_eval_multi(cfm))
temp <- temp + 1
}
}
val_perf
#Check best and worst combination of ANN
best <- val_perf[order(val_perf[,4],decreasing = TRUE),]
colnames(best) <- c("nH","Maxit","ACC","BCR")
worst <- val_perf[order(val_perf[,4],decreasing = FALSE),]
colnames(worst) <- c("nH","Maxit","ACC","BCR")
best
worst
best
worst

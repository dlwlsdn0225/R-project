#True Positive Rate: TPR
TPR <- cm[2,2]/sum(cm[2,])
#Precision
PRE <- cm[2,2]/sum(cm[,2])
#True Negative Rate: TNR
TNR <- cm[1,1]/sum(cm[1,])
#Simple Accuracy
ACC <- (cm[1,1]+cm[2,2])/sum(cm)
#Balanced Correction Rate
BCR <- sqrt(TPR*TNR)
#F1- Measure
F1 <- 2*TPR*PRE/(TPR+PRE)
return(c(TPR, PRE, TNR, ACC, BCR, F1))
}
perf_mat[1,] <- perf_eval3(cm_full2)
perf_mat
cm_full2
perf_mat[1,] <- perf_eval2(cm_full)
pefr_mat[1,]
perf_mat[1,]
#ROC 생성
initial <- c("0","0")
#Q7-3
#AUROC
#lr_response를 기준으로 내림차순
Roc7 <- data.frame(lr_response3, diabetes_tst_new$diabetes_target)
Roc8<- arrange(Roc7, desc(lr_response3),diabetes_tst_new$diabetes_target)
colnames(Roc8) <- c("P(diabetes)", "diabetes")
#tpr과 fpr
TPR5 <- length(which(Roc8$diabetes==1))
FPR5 <- length(which(Roc8diabetes==0))
FPR5 <- length(which(Roc8$diabetes==0))
TPR_FPR3 <- cbind(0,0)
colnames(TPR_FPR3) <- c("TPR","FPR")
FPR6 = 0
for(i in 1:nrow(Roc8)){
if(Roc8[i,2]==1){
TPR6 <- TPR6 + 1
}else{
FPR6 <- FPR6 + 1
}
TPR_tmp3 <- TPR6/TPR5
FPR_tmp3 <- FPR6/FPR5
TPR_FPR_tmp3 <- data.frame(TPR_tmp3,FPR_tmp3)
colnames(TPR_FPR_tmp3) <- c("TPR","FPR")
TPR_FPR3 <- rbind(TPR_FPR3,TPR_FPR_tmp3)
}
TPR6 = 0
FPR6 = 0
for(i in 1:nrow(Roc8)){
if(Roc8[i,2]==1){
TPR6 <- TPR6 + 1
}else{
FPR6 <- FPR6 + 1
}
TPR_tmp3 <- TPR6/TPR5
FPR_tmp3 <- FPR6/FPR5
TPR_FPR_tmp3 <- data.frame(TPR_tmp3,FPR_tmp3)
colnames(TPR_FPR_tmp3) <- c("TPR","FPR")
TPR_FPR3 <- rbind(TPR_FPR3,TPR_FPR_tmp3)
}
#ROC 생성
initial <- c("0","0")
Roc9 <- rbind(initial,Roc9)
#ROC 생성
initial <- c("0","0")
Roc9 <- rbind(initial,Roc9)
Roc9 <- rbind(initial,Roc8)
#TPR과 FPR을 묶어주기
ROC_data3 <- data.frame(Roc9,TPR_FPR3)
colnames(ROC_data3) <- c("P(diabetes)","diabetes","TPR(Sensitivity)","FPR(1-Specificity)")
#ROC 그래프 그리기
ggplot(data = ROC_data3, aes(x=`FPR(1-Specificity)`,y=`TPR(Sensitivity)`))+geom_line(color="red")+geom_abline(color = "blue", linetype = "dashed")
#AUROC 계산을 위한 코드
TPR_FPR %>%
arrange(FPR) %>%
mutate(area_rectangle = (lead(FPR)-FPR)*pmin(TPR,lead(TPR)),
area_triangle = 0.5 * (lead(FPR)-FPR)*abs(TPR-lead(TPR))) %>%
summarise(area = sum(area_rectangle + area_triangle, na.rm = TRUE))
#AUROC 계산을 위한 코드
TPR_FPR3 %>%
arrange(FPR) %>%
mutate(area_rectangle = (lead(FPR)-FPR)*pmin(TPR,lead(TPR)),
area_triangle = 0.5 * (lead(FPR)-FPR)*abs(TPR-lead(TPR))) %>%
summarise(area = sum(area_rectangle + area_triangle, na.rm = TRUE))
#AUROC 계산을 위한 코드
TPR_FPR %>%
arrange(FPR) %>%
mutate(area_rectangle = (lead(FPR)-FPR)*pmin(TPR,lead(TPR)),
area_triangle = 0.5 * (lead(FPR)-FPR)*abs(TPR-lead(TPR))) %>%
summarise(area = sum(area_rectangle + area_triangle, na.rm = TRUE))
#AUROC 계산을 위한 코드
TPR_FPR3 %>%
arrange(FPR) %>%
mutate(area_rectangle = (lead(FPR)-FPR)*pmin(TPR,lead(TPR)),
area_triangle = 0.5 * (lead(FPR)-FPR)*abs(TPR-lead(TPR))) %>%
summarise(area = sum(area_rectangle + area_triangle, na.rm = TRUE))
#Train data set에 대한 AUROC
#lr_response2를 기준으로 내림차순
lr_response_ <- predict(full_lr, type="response", newdata=diabetes_trn_new)
#Train data set에 대한 AUROC
#lr_response2를 기준으로 내림차순
lr_response_new <- predict(full_lr2, type="response", newdata=diabetes_trn_new)
lr_target_new <- diabetes_trn_new $diabetes_target
lr_predicted_new<- rep(0, length(lr_target_new))
lr_predicted_new[which(lr_response_new >=0.5)] <- 1
Roc_A <- data.frame(lr_response_new, diabetes_trn_new$diabetes_target)
Roc_B<- arrange(Roc_A, desc(lr_response_new),diabetes_trn_new$diabetes_target)
colnames(Roc_B) <- c("P(diabetes)", "diabetes")
#test 데이터 셋 tpr과 fpr
TPR_A <- length(which(Roc_A$diabetes==1))
FPR_A <- length(which(Roc_B$diabetes==0))
TPR_FPRA <- cbind(0,0)
TPR_FPR_A <- cbind(0,0)
colnames(TPR_FPR_A) <- c("TPR","FPR")
Roc_1<- data.frame(lr_response_new, diabetes_trn_new$diabetes_target)
Roc_2<- arrange(Roc_1, desc(lr_response_new),diabetes_trn_new$diabetes_target)
#test 데이터 셋 tpr과 fpr
TPR_1 <- length(which(Roc_A$diabetes==1))
FPR_1 <- length(which(Roc_1$diabetes==0))
TPR_FPR_1 <- cbind(0,0)
colnames(TPR_FPR_1) <- c("TPR","FPR")
TPR_2 = 0
FPR_2 = 0
FPR_tmp_2 <- FPR_2/FPR_1
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
for(i in 1:nrow(Roc_1)){
if(Roc_1[i,2]==1){
TPR_2 <- TPR_2 + 1
}else{
FPR_2 <- FPR_2 + 1
}
TPR_tmp_1 <- TPR_2/TPR_1
FPR_tmp_1 <- FPR_2/FPR_1
TPR_FPR_tmp_1 <- data.frame(TPR_tmp_1,FPR_tmp_1)
colnames(TPR_FPR_tmp1) <- c("TPR","FPR")
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
}
for(i in 1:nrow(Roc_1)){
if(Roc_1[i,2]==1){
TPR_2 <- TPR_2 + 1
}else{
FPR_2 <- FPR_2 + 1
}
TPR_tmp_1 <- TPR_2/TPR_1
FPR_tmp_1 <- FPR_2/FPR_1
TPR_FPR_tmp_1 <- data.frame(TPR_tmp_1,FPR_tmp_1)
colnames(TPR_FPR_tmp1) <- c("TPR","FPR")
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
}
colnames(TPR_FPR_tmp_1) <- c("TPR","FPR")
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
for(i in 1:nrow(Roc_1)){
if(Roc_1[i,2]==1){
TPR_2 <- TPR_2 + 1
}else{
FPR_2 <- FPR_2 + 1
}
TPR_tmp_1 <- TPR_2/TPR_1
FPR_tmp_1 <- FPR_2/FPR_1
TPR_FPR_tmp_1 <- data.frame(TPR_tmp_1,FPR_tmp_1)
colnames(TPR_FPR_tmp_1) <- c("TPR","FPR")
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
}
#ROC 생성
initial <- c("0","0")
Roc_3<- rbind(initial,Roc_2)
#TPR과 FPR을 묶어주기
ROC_data_1 <- data.frame(Roc_3,TPR_FPR_1)
Roc_3<- rbind(initial,Roc_2)
#TPR과 FPR을 묶어주기
ROC_data_1 <- data.frame(Roc_3,TPR_FPR_1)
#ROC 생성
initial4 <- c("0","0")
Roc_3<- rbind(initial4,Roc_2)
#TPR과 FPR을 묶어주기
ROC_data_1 <- data.frame(Roc_3,TPR_FPR_1)
#Train data set에 대한 AUROC
#lr_response2를 기준으로 내림차순
lr_response_new <- predict(full_lr2, type="response", newdata=diabetes_trn_new)
lr_target_new <- diabetes_trn_new $diabetes_target
lr_predicted_new<- rep(0, length(lr_target_new))
lr_predicted_new[which(lr_response_new >=0.5)] <- 1
Roc_1<- data.frame(lr_response_new, diabetes_trn_new$diabetes_target)
Roc_2<- arrange(Roc_1, desc(lr_response_new),diabetes_trn_new$diabetes_target)
colnames(Roc_B) <- c("P(diabetes)", "diabetes")
#test 데이터 셋 tpr과 fpr
TPR_1 <- length(which(Roc_1$diabetes==1))
FPR_1 <- length(which(Roc_1$diabetes==0))
TPR_FPR_1 <- cbind(0,0)
colnames(TPR_FPR_1) <- c("TPR","FPR")
TPR_2 = 0
FPR_2 = 0
for(i in 1:nrow(Roc_1)){
if(Roc_1[i,2]==1){
TPR_2 <- TPR_2 + 1
}else{
FPR_2 <- FPR_2 + 1
}
TPR_tmp_1 <- TPR_2/TPR_1
FPR_tmp_1 <- FPR_2/FPR_1
TPR_FPR_tmp_1 <- data.frame(TPR_tmp_1,FPR_tmp_1)
colnames(TPR_FPR_tmp_1) <- c("TPR","FPR")
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
}
#ROC 생성
initial4 <- c("0","0")
Roc_3<- rbind(initial4,Roc_2)
#TPR과 FPR을 묶어주기
ROC_data_1 <- data.frame(Roc_3,TPR_FPR_1)
colnames(ROC_data1) <- c("P(diabetes)","diabetes","TPR(Sensitivity)","FPR(1-Specificity)")
ROC_data_1
colnames(ROC_data1) <- c("P(diabetes)","diabetes","TPR(Sensitivity)","FPR(1-Specificity)")
colnames(ROC_data_1) <- c("P(diabetes)","diabetes","TPR(Sensitivity)","FPR(1-Specificity)")
ROC_data_1
#ROC 그래프 그리기
ggplot(data = ROC_data_1, aes(x=`FPR(1-Specificity)`,y=`TPR(Sensitivity)`))+geom_line(color="red")+geom_abline(color = "blue", linetype = "dashed")
#AUROC 계산을 위한 코드
TPR_FPR_1 %>%
arrange(FPR) %>%
mutate(area_rectangle = (lead(FPR)-FPR)*pmin(TPR,lead(TPR)),
area_triangle = 0.5 * (lead(FPR)-FPR)*abs(TPR-lead(TPR))) %>%
summarise(area = sum(area_rectangle + area_triangle, na.rm = TRUE))
#Train data set에 대한 AUROC
#lr_response2를 기준으로 내림차순
lr_response_new <- predict(full_lr2, type="response", newdata=diabetes_trn_new)
lr_target_new <- diabetes_trn_new $diabetes_target
lr_predicted_new<- rep(0, length(lr_target_new))
lr_predicted_new[which(lr_response_new >=0.5)] <- 1
Roc_1<- data.frame(lr_response_new, diabetes_trn_new$diabetes_target)
Roc_2<- arrange(Roc_1, desc(lr_response_new),diabetes_trn_new$diabetes_target)
colnames(Roc_2) <- c("P(diabetes)", "diabetes")
#test 데이터 셋 tpr과 fpr
TPR_1 <- length(which(Roc_2$diabetes==1))
FPR_1 <- length(which(Roc_2$diabetes==0))
TPR_FPR_1 <- cbind(0,0)
colnames(TPR_FPR_1) <- c("TPR","FPR")
TPR_2 = 0
FPR_2 = 0
for(i in 1:nrow(Roc_1)){
if(Roc_1[i,2]==1){
TPR_2 <- TPR_2 + 1
}else{
FPR_2 <- FPR_2 + 1
}
TPR_tmp_1 <- TPR_2/TPR_1
FPR_tmp_1 <- FPR_2/FPR_1
TPR_FPR_tmp_1 <- data.frame(TPR_tmp_1,FPR_tmp_1)
colnames(TPR_FPR_tmp_1) <- c("TPR","FPR")
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
}
#ROC 생성
initial4 <- c("0","0")
Roc_3<- rbind(initial4,Roc_2)
#TPR과 FPR을 묶어주기
ROC_data_1 <- data.frame(Roc_3,TPR_FPR_1)
colnames(ROC_data_1) <- c("P(diabetes)","diabetes","TPR(Sensitivity)","FPR(1-Specificity)")
ROC_data_1
#ROC 그래프 그리기
ggplot(data = ROC_data_1, aes(x=`FPR(1-Specificity)`,y=`TPR(Sensitivity)`))+geom_line(color="red")+geom_abline(color = "blue", linetype = "dashed")
#AUROC 계산을 위한 코드
TPR_FPR_1 %>%
arrange(FPR) %>%
mutate(area_rectangle = (lead(FPR)-FPR)*pmin(TPR,lead(TPR)),
area_triangle = 0.5 * (lead(FPR)-FPR)*abs(TPR-lead(TPR))) %>%
summarise(area = sum(area_rectangle + area_triangle, na.rm = TRUE))
if(Roc_2[i,2]==1){
TPR_2 <- TPR_2 + 1
}else{
FPR_2 <- FPR_2 + 1
}
for(i in 1:nrow(Roc_2)){
if(Roc_2[i,2]==1){
TPR_2 <- TPR_2 + 1
}else{
FPR_2 <- FPR_2 + 1
}
TPR_tmp_1 <- TPR_2/TPR_1
FPR_tmp_1 <- FPR_2/FPR_1
TPR_FPR_tmp_1 <- data.frame(TPR_tmp_1,FPR_tmp_1)
colnames(TPR_FPR_tmp_1) <- c("TPR","FPR")
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
}
#ROC 생성
initial4 <- c("0","0")
Roc_3<- rbind(initial4,Roc_2)
#TPR과 FPR을 묶어주기
ROC_data_1 <- data.frame(Roc_3,TPR_FPR_1)
colnames(ROC_data_1) <- c("P(diabetes)","diabetes","TPR(Sensitivity)","FPR(1-Specificity)")
ROC_data_1
#TPR과 FPR을 묶어주기
ROC_data_1 <- data.frame(Roc_3,TPR_FPR_1)
View(TPR_FPR_1)
View(TPR_FPR_1)
for(i in 1:nrow(Roc_2)){
if(Roc_2[i,2]==1){
TPR_2 <- TPR_2 + 1
}else{
FPR_2 <- FPR_2 + 1
}
TPR_tmp_1 <- TPR_2/TPR_1
FPR_tmp_1 <- FPR_2/FPR_1
TPR_FPR_tmp_1 <- data.frame(TPR_tmp_1,FPR_tmp_1)
colnames(TPR_FPR_tmp_1) <- c("TPR","FPR")
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
}
#ROC 생성
initial4 <- c("0","0")
Roc_3<- rbind(initial4,Roc_2)
#TPR과 FPR을 묶어주기
ROC_data_1 <- data.frame(Roc_3,TPR_FPR_1)
View(TPR_FPR_1)
View(TPR_FPR_1)
View(TPR_FPR_1)
TPR_FPR_1 <- 0
for(i in 1:nrow(Roc_2)){
if(Roc_2[i,2]==1){
TPR_2 <- TPR_2 + 1
}else{
FPR_2 <- FPR_2 + 1
}
TPR_tmp_1 <- TPR_2/TPR_1
FPR_tmp_1 <- FPR_2/FPR_1
TPR_FPR_tmp_1 <- data.frame(TPR_tmp_1,FPR_tmp_1)
colnames(TPR_FPR_tmp_1) <- c("TPR","FPR")
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
}
#ROC 생성
initial4 <- c("0","0")
Roc_3<- rbind(initial4,Roc_2)
#TPR과 FPR을 묶어주기
ROC_data_1 <- data.frame(Roc_3,TPR_FPR_1)
colnames(ROC_data_1) <- c("P(diabetes)","diabetes","TPR(Sensitivity)","FPR(1-Specificity)")
ROC_data_1
#ROC 그래프 그리기
ggplot(data = ROC_data_1, aes(x=`FPR(1-Specificity)`,y=`TPR(Sensitivity)`))+geom_line(color="red")+geom_abline(color = "blue", linetype = "dashed")
rownames(ROC_2) <- NULL
colnames(Roc_2) <- c("P(diabetes)", "diabetes")
#test 데이터 셋 tpr과 fpr
TPR_1 <- length(which(Roc_2$diabetes==1))
FPR_1 <- length(which(Roc_2$diabetes==0))
TPR_FPR_1 <- cbind(0,0)
colnames(TPR_FPR_1) <- c("TPR","FPR")
TPR_2 = 0
FPR_2 = 0
for(i in 1:nrow(Roc_2)){
if(Roc_2[i,2]==1){
TPR_2 <- TPR_2 + 1
}else{
FPR_2 <- FPR_2 + 1
}
TPR_tmp_1 <- TPR_2/TPR_1
FPR_tmp_1 <- FPR_2/FPR_1
TPR_FPR_tmp_1 <- data.frame(TPR_tmp_1,FPR_tmp_1)
colnames(TPR_FPR_tmp_1) <- c("TPR","FPR")
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
}
#ROC 생성
initial4 <- c("0","0")
Roc_3<- rbind(initial4,Roc_2)
#TPR과 FPR을 묶어주기
ROC_data_1 <- data.frame(Roc_3,TPR_FPR_1)
colnames(ROC_data_1) <- c("P(diabetes)","diabetes","TPR(Sensitivity)","FPR(1-Specificity)")
ROC_data_1
#AUROC 계산을 위한 코드
TPR_FPR_1 %>%
arrange(FPR) %>%
mutate(area_rectangle = (lead(FPR)-FPR)*pmin(TPR,lead(TPR)),
area_triangle = 0.5 * (lead(FPR)-FPR)*abs(TPR-lead(TPR))) %>%
summarise(area = sum(area_rectangle + area_triangle, na.rm = TRUE))
#Train data set에 대한 AUROC
lr_response_new <- predict(full_lr2, type="response", newdata=diabetes_trn_new)
lr_target_new <- diabetes_trn_new $diabetes_target
lr_predicted_new<- rep(0, length(lr_target_new))
lr_predicted_new[which(lr_response_new >=0.5)] <- 1
Roc_1<- data.frame(lr_response_new, diabetes_trn_new$diabetes_target)
Roc_2<- arrange(Roc_1, desc(lr_response_new),diabetes_trn_new$diabetes_target)
rownames(ROC_2) <- NULL
colnames(Roc_2) <- c("P(diabetes)", "diabetes")
Roc_2<- arrange(Roc_1, desc(lr_response_new),diabetes_trn_new$diabetes_target)
rownames(ROC_2) <- NULL
#Train data set에 대한 AUROC
lr_response_new <- predict(full_lr2, type="response", newdata=diabetes_trn_new)
lr_target_new <- diabetes_trn_new $diabetes_target
lr_predicted_new<- rep(0, length(lr_target_new))
lr_predicted_new[which(lr_response_new >=0.5)] <- 1
Roc_1<- data.frame(lr_response_new, diabetes_trn_new$diabetes_target)
Roc_2<- arrange(Roc_1, desc(lr_response_new),diabetes_trn_new$diabetes_target)
rownames(ROC_2) <- NULL
rownames(Roc_2) <- NULL
colnames(Roc_2) <- c("P(diabetes)", "diabetes")
#test 데이터 셋 tpr과 fpr
TPR_1 <- length(which(Roc_2$diabetes==1))
FPR_1 <- length(which(Roc_2$diabetes==0))
TPR_FPR_1 <- cbind(0,0)
colnames(TPR_FPR_1) <- c("TPR","FPR")
TPR_2 = 0
FPR_2 = 0
for(i in 1:nrow(Roc_2)){
if(Roc_2[i,2]==1){
TPR_2 <- TPR_2 + 1
}else{
FPR_2 <- FPR_2 + 1
}
TPR_tmp_1 <- TPR_2/TPR_1
FPR_tmp_1 <- FPR_2/FPR_1
TPR_FPR_tmp_1 <- data.frame(TPR_tmp_1,FPR_tmp_1)
colnames(TPR_FPR_tmp_1) <- c("TPR","FPR")
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
}
TPR_FPR_1 <- 0
#Train data set에 대한 AUROC
lr_response_new <- predict(full_lr2, type="response", newdata=diabetes_trn_new)
lr_target_new <- diabetes_trn_new $diabetes_target
lr_predicted_new<- rep(0, length(lr_target_new))
lr_predicted_new[which(lr_response_new >=0.5)] <- 1
Roc_1<- data.frame(lr_response_new, diabetes_trn_new$diabetes_target)
Roc_2<- arrange(Roc_1, desc(lr_response_new),diabetes_trn_new$diabetes_target)
rownames(Roc_2) <- NULL
colnames(Roc_2) <- c("P(diabetes)", "diabetes")
#test 데이터 셋 tpr과 fpr
TPR_1 <- length(which(Roc_2$diabetes==1))
FPR_1 <- length(which(Roc_2$diabetes==0))
TPR_FPR_1 <- cbind(0,0)
colnames(TPR_FPR_1) <- c("TPR","FPR")
TPR_2 = 0
FPR_2 = 0
for(i in 1:nrow(Roc_2)){
if(Roc_2[i,2]==1){
TPR_2 <- TPR_2 + 1
}else{
FPR_2 <- FPR_2 + 1
}
TPR_tmp_1 <- TPR_2/TPR_1
FPR_tmp_1 <- FPR_2/FPR_1
TPR_FPR_tmp_1 <- data.frame(TPR_tmp_1,FPR_tmp_1)
colnames(TPR_FPR_tmp_1) <- c("TPR","FPR")
TPR_FPR_1 <- rbind(TPR_FPR_1,TPR_FPR_tmp_1)
}
#ROC 생성
initial4 <- c("0","0")
Roc_3<- rbind(initial4,Roc_2)
#TPR과 FPR을 묶어주기
ROC_data_1 <- data.frame(Roc_3,TPR_FPR_1)
colnames(ROC_data_1) <- c("P(diabetes)","diabetes","TPR(Sensitivity)","FPR(1-Specificity)")
#ROC 그래프 그리기
ggplot(data = ROC_data_1, aes(x=`FPR(1-Specificity)`,y=`TPR(Sensitivity)`))+geom_line(color="red")+geom_abline(color = "blue", linetype = "dashed")
#AUROC 계산을 위한 코드
TPR_FPR_1 %>%
arrange(FPR) %>%
mutate(area_rectangle = (lead(FPR)-FPR)*pmin(TPR,lead(TPR)),
area_triangle = 0.5 * (lead(FPR)-FPR)*abs(TPR-lead(TPR))) %>%
summarise(area = sum(area_rectangle + area_triangle, na.rm = TRUE))
#ROC 그래프 그리기
ggplot(data = ROC_data_1, aes(x=`FPR(1-Specificity)`,y=`TPR(Sensitivity)`))+geom_line(color="red")+geom_abline(color = "blue", linetype = "dashed")
#ROC 그래프 그리기
ggplot(data = ROC_data3, aes(x=`FPR(1-Specificity)`,y=`TPR(Sensitivity)`))+geom_line(color="red")+geom_abline(color = "blue", linetype = "dashed")
#Q[8]
#Pesudo R2
install.packages("lmtest")
library(lmtest)
full_lr <- glm(diabetes_target ~., family=binomial, diabetes_trn)
full_lr2 <- glm(diabetes_target ~., family=binomial, diabetes_trn_new)
lrtest(full_lr, full_lr2)
install.packages("pscl")
library(pscl)
#Q[8]
#Pesudo R2
install.packages("MKmisc")
library(pscl)
library(MKmisc)
install.packages("ResourceSelection")
library(ResourceSelection)
pR2(full_lr)
HLgof.test(fit=fitted(full_lr),obs=diabetes_trn$diabetes_target)
hoslem.test(diabetes_trn$diabetes_target, fitted(full_lr),g=10)
library(ResourceSelection)
library(pscl)
library(MKmisc)
install.packages("limma")
library(limma)
#Q[8]
#Pesudo R2
install.packages("MKmisc")
library(MKmisc)
pR2(full_lr)
HLgof.test(fit=fitted(full_lr),obs=diabetes_trn$diabetes_target)
pR2(full_lr)
hoslem.test(diabetes_trn$diabetes_target, fitted(full_lr),g=10)
varImp(full_lr)
install.packages("varImp")
pR2(full_lr)
varImp(full_lr)
libary(varImp)
library(varImp)
varImp(full_lr)
mod_fit <- train(diabetes_target ~ Pregnancies+Glucose+BloodPressure+SkinThickness+BMI+Age,data=diabetes_data_trn)
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("caret")
library(caret)
install.packages("caret")
install.packages("caret")
library(varImp)
library(pscl)
library(caret)
mod_fit <- train(diabetes_target ~ Pregnancies+Glucose+BloodPressure+SkinThickness+BMI+Age,data=diabetes_data_trn)
#4단원 Dimensionality Reduction
install.packages("glmnet")
install.packagefs("GA")
library(glmnet)
install.packages("GA")
library(GA)

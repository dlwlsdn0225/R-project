colnames(d_CART_pre_search_result) <- c("min_criterion","min_split","max_detph","TPR","Precision",
"TNR","ACC","BCR","F1","AUROC","N_leaves")
#optimal parameter 찾기
#125개의 파라미터 조합 만들어주기
iter_cnt=1
for (i in 1:length(d_min_criterion)){
for(j in 1:length(d_min_split)){
for (k in 1:length(d_max_depth)){
cat("CART Min criterion:", d_min_criterion[i],",Min split:",
d_min_split[j], ",Max depth:", d_max_depth[k], "\n")
d_tmp_control=ctree_control(mincriterion = d_min_criterion[i],minsplit=d_min_split[j],maxdepth = d_max_depth[k])
d_tmp_tree <- ctree(diabetesYN ~., data=d_CART_trn, controls=d_tmp_control)
d_tmp_tree_val_prediction <- predict(d_tmp_tree, newdata=d_CART_val)
d_tmp_tree_val_response <- d_treeresponse(d_tmp_tree)
d_tmp_tree_val_prob <- 1-unlist(d_tmp_tree_val_response, use.names=F)[seq(1,nrow(d_CART_val)*2,2)]
d_tmp_tree_val_rocr <- prediction(d_tmp_tree_val_prob, d_CART_val$diabetesYN)
d_tmp_tree_val_cm <- table(d_CART_val$diabetesYN, d_tmp_tree_val_prediction)
#parameter
d_CART_pre_search_result[iter_cnt,1]=d_min_criterion[i]
d_CART_pre_search_result[iter_cnt,2]=d_min_split[j]
d_CART_pre_search_result[iter_cnt,3]=d_max_depth[k]
#confusion matrix
d_CART_pre_search_result[iter_cnt,4:9] <- perf_eval(d_tmp_tree_val_cm)
#AUROC
d_CART_pre_search_result[iter_cnt,10] <- unlist(performance(d_tmp_tree_val_rocr,"auc")@y.values)
#No of leaf nodes
d_CART_pre_search_result[iter_cnt,11] <- length(nodes(d_tmp_tree,unique(where(d_tmp_tree))))
iter_cnt =iter_cnt+1
}
}
}
#optimal parameter 찾기
#125개의 파라미터 조합 만들어주기
iter_cnt=1
for (i in 1:length(d_min_criterion)){
for(j in 1:length(d_min_split)){
for (k in 1:length(d_max_depth)){
cat("CART Min criterion:", d_min_criterion[i],",Min split:",
d_min_split[j], ",Max depth:", d_max_depth[k], "\n")
d_tmp_control=ctree_control(mincriterion = d_min_criterion[i],minsplit=d_min_split[j],maxdepth = d_max_depth[k])
d_tmp_tree <- ctree(diabetesYN ~., data=d_CART_trn, controls=d_tmp_control)
d_tmp_tree_val_prediction <- predict(d_tmp_tree, newdata=d_CART_val)
d_tmp_tree_val_response <- treeresponse(d_tmp_tree)
d_tmp_tree_val_prob <- 1-unlist(d_tmp_tree_val_response, use.names=F)[seq(1,nrow(d_CART_val)*2,2)]
d_tmp_tree_val_rocr <- prediction(d_tmp_tree_val_prob, d_CART_val$diabetesYN)
d_tmp_tree_val_cm <- table(d_CART_val$diabetesYN, d_tmp_tree_val_prediction)
#parameter
d_CART_pre_search_result[iter_cnt,1]=d_min_criterion[i]
d_CART_pre_search_result[iter_cnt,2]=d_min_split[j]
d_CART_pre_search_result[iter_cnt,3]=d_max_depth[k]
#confusion matrix
d_CART_pre_search_result[iter_cnt,4:9] <- perf_eval(d_tmp_tree_val_cm)
#AUROC
d_CART_pre_search_result[iter_cnt,10] <- unlist(performance(d_tmp_tree_val_rocr,"auc")@y.values)
#No of leaf nodes
d_CART_pre_search_result[iter_cnt,11] <- length(nodes(d_tmp_tree,unique(where(d_tmp_tree))))
iter_cnt =iter_cnt+1
}
}
}
#정렬시켜주기
d_CART_pre_search_result <- d_CART_pre_search_result[order(d_CART_pre_search_result[,10], decreasing=T),]
d_CART_pre_search_result
#정렬시켜주기
d_CART_pre_search_result <- d_CART_pre_search_result[order(d_CART_pre_search_result[,10], decreasing=T),]
d_CART_pre_search_result
#정렬시켜주기
d_CART_pre_search_result <- d_CART_pre_search_result[order(d_CART_pre_search_result[,10], decreasing=T),]
d_CART_pre_search_result
d_best_criterion <- d_CART_pre_search_result[1,1]
d_best_split <-d_CART_pre_search_result[1,2]
d_best_depth <- d_CART_pre_search_result[1,3]
#Diabetes data-----pre pruning
d_min_criterion <- c(0.6,0.7,0.8,0.9,0.95)
d_min_split <- c(5,15,35,55,70)
d_max_depth <- c(2,4,6,8,10)
d_CART_pre_search_result=matrix(0,length(d_min_criterion)*length(d_min_split)*length(d_max_depth),11)
colnames(d_CART_pre_search_result) <- c("min_criterion","min_split","max_detph","TPR","Precision",
"TNR","ACC","BCR","F1","AUROC","N_leaves")
#optimal parameter 찾기
#125개의 파라미터 조합 만들어주기
iter_cnt=1
for (i in 1:length(d_min_criterion)){
for(j in 1:length(d_min_split)){
for (k in 1:length(d_max_depth)){
cat("CART Min criterion:", d_min_criterion[i],",Min split:",
d_min_split[j], ",Max depth:", d_max_depth[k], "\n")
d_tmp_control=ctree_control(mincriterion = d_min_criterion[i],minsplit=d_min_split[j],maxdepth = d_max_depth[k])
d_tmp_tree <- ctree(diabetesYN ~., data=d_CART_trn, controls=d_tmp_control)
d_tmp_tree_val_prediction <- predict(d_tmp_tree, newdata=d_CART_val)
d_tmp_tree_val_response <- treeresponse(d_tmp_tree)
d_tmp_tree_val_prob <- 1-unlist(d_tmp_tree_val_response, use.names=F)[seq(1,nrow(d_CART_val)*2,2)]
d_tmp_tree_val_rocr <- prediction(d_tmp_tree_val_prob, d_CART_val$diabetesYN)
d_tmp_tree_val_cm <- table(d_CART_val$diabetesYN, d_tmp_tree_val_prediction)
#parameter
d_CART_pre_search_result[iter_cnt,1]=d_min_criterion[i]
d_CART_pre_search_result[iter_cnt,2]=d_min_split[j]
d_CART_pre_search_result[iter_cnt,3]=d_max_depth[k]
#confusion matrix
d_CART_pre_search_result[iter_cnt,4:9] <- perf_eval(d_tmp_tree_val_cm)
#AUROC
d_CART_pre_search_result[iter_cnt,10] <- unlist(performance(d_tmp_tree_val_rocr,"auc")@y.values)
#No of leaf nodes
d_CART_pre_search_result[iter_cnt,11] <- length(nodes(d_tmp_tree,unique(where(d_tmp_tree))))
iter_cnt =iter_cnt+1
}
}
}
#정렬시켜주기
d_CART_pre_search_result <- d_CART_pre_search_result[order(d_CART_pre_search_result[,10], decreasing=T),]
d_CART_pre_search_result4
d_best_criterion <- d_CART_pre_search_result[1,1]
d_best_split <-d_CART_pre_search_result[1,2]
#Diabetes data-----pre pruning
d_min_criterion <- c(0.6,0.7,0.8,0.9,0.95)
d_min_split <- c(5,15,35,55,70)
d_max_depth <- c(2,4,6,8,10)
d_CART_pre_search_result=matrix(0,length(d_min_criterion)*length(d_min_split)*length(d_max_depth),11)
colnames(d_CART_pre_search_result) <- c("min_criterion","min_split","max_detph","TPR","Precision",
"TNR","ACC","BCR","F1","AUROC","N_leaves")
#optimal parameter 찾기
#125개의 파라미터 조합 만들어주기
iter_cnt=1
for (i in 1:length(d_min_criterion)){
for(j in 1:length(d_min_split)){
for (k in 1:length(d_max_depth)){
cat("CART Min criterion:", d_min_criterion[i],",Min split:",
d_min_split[j], ",Max depth:", d_max_depth[k], "\n")
d_tmp_control=ctree_control(mincriterion = d_min_criterion[i],minsplit=d_min_split[j],maxdepth = d_max_depth[k])
d_tmp_tree <- ctree(diabetesYN ~., data=d_CART_trn, controls=d_tmp_control)
d_tmp_tree_val_prediction <- predict(d_tmp_tree, newdata=d_CART_val)
d_tmp_tree_val_response <- treeresponse(d_tmp_tree)
d_tmp_tree_val_prob <- 1-unlist(d_tmp_tree_val_response, use.names=F)[seq(1,nrow(d_CART_val)*2,2)]
d_tmp_tree_val_rocr <- prediction(d_tmp_tree_val_prob, d_CART_val$diabetesYN)
d_tmp_tree_val_cm <- table(d_CART_val$diabetesYN, d_tmp_tree_val_prediction)
#parameter
d_CART_pre_search_result[iter_cnt,1]=d_min_criterion[i]
d_CART_pre_search_result[iter_cnt,2]=d_min_split[j]
d_CART_pre_search_result[iter_cnt,3]=d_max_depth[k]
#confusion matrix
d_CART_pre_search_result[iter_cnt,4:9] <- perf_eval(d_tmp_tree_val_cm)
#AUROC
d_CART_pre_search_result[iter_cnt,10] <- unlist(performance(d_tmp_tree_val_rocr,"auc")@y.values)
#No of leaf nodes
d_CART_pre_search_result[iter_cnt,11] <- length(nodes(d_tmp_tree,unique(where(d_tmp_tree))))
iter_cnt =iter_cnt+1
}
}
}
#정렬시켜주기
d_CART_pre_search_result <- d_CART_pre_search_result[order(d_CART_pre_search_result[,10], decreasing=T),]
d_CART_pre_search_result
d_min_split <- c(5,15,35,45,50)
d_max_depth <- c(2,4,6,8,10)
d_CART_pre_search_result=matrix(0,length(d_min_criterion)*length(d_min_split)*length(d_max_depth),11)
colnames(d_CART_pre_search_result) <- c("min_criterion","min_split","max_detph","TPR","Precision",
"TNR","ACC","BCR","F1","AUROC","N_leaves")
#optimal parameter 찾기
#125개의 파라미터 조합 만들어주기
iter_cnt=1
for (i in 1:length(d_min_criterion)){
for(j in 1:length(d_min_split)){
for (k in 1:length(d_max_depth)){
cat("CART Min criterion:", d_min_criterion[i],",Min split:",
d_min_split[j], ",Max depth:", d_max_depth[k], "\n")
d_tmp_control=ctree_control(mincriterion = d_min_criterion[i],minsplit=d_min_split[j],maxdepth = d_max_depth[k])
d_tmp_tree <- ctree(diabetesYN ~., data=d_CART_trn, controls=d_tmp_control)
d_tmp_tree_val_prediction <- predict(d_tmp_tree, newdata=d_CART_val)
d_tmp_tree_val_response <- treeresponse(d_tmp_tree)
d_tmp_tree_val_prob <- 1-unlist(d_tmp_tree_val_response, use.names=F)[seq(1,nrow(d_CART_val)*2,2)]
d_tmp_tree_val_rocr <- prediction(d_tmp_tree_val_prob, d_CART_val$diabetesYN)
d_tmp_tree_val_cm <- table(d_CART_val$diabetesYN, d_tmp_tree_val_prediction)
#parameter
d_CART_pre_search_result[iter_cnt,1]=d_min_criterion[i]
d_CART_pre_search_result[iter_cnt,2]=d_min_split[j]
d_CART_pre_search_result[iter_cnt,3]=d_max_depth[k]
#confusion matrix
d_CART_pre_search_result[iter_cnt,4:9] <- perf_eval(d_tmp_tree_val_cm)
#AUROC
d_CART_pre_search_result[iter_cnt,10] <- unlist(performance(d_tmp_tree_val_rocr,"auc")@y.values)
#No of leaf nodes
d_CART_pre_search_result[iter_cnt,11] <- length(nodes(d_tmp_tree,unique(where(d_tmp_tree))))
iter_cnt =iter_cnt+1
}
}
}
for (i in 1:length(d_min_criterion)){
for(j in 1:length(d_min_split)){
for (k in 1:length(d_max_depth)){
cat("CART Min criterion:", d_min_criterion[i],",Min split:",
d_min_split[j], ",Max depth:", d_max_depth[k], "\n")
d_tmp_control=ctree_control(mincriterion = d_min_criterion[i],minsplit=d_min_split[j],maxdepth = d_max_depth[k])
d_tmp_tree <- ctree(diabetesYN ~., data=d_CART_trn, controls=d_tmp_control)
d_tmp_tree_val_prediction <- predict(d_tmp_tree, newdata=d_CART_val)
d_tmp_tree_val_response <- treeresponse(d_tmp_tree)
d_tmp_tree_val_prob <- 1-unlist(d_tmp_tree_val_response, use.names=F)[seq(1,nrow(d_CART_val)*2,2)]
d_tmp_tree_val_rocr <- prediction(d_tmp_tree_val_prob, d_CART_val$diabetesYN)
d_tmp_tree_val_cm <- table(d_CART_val$diabetesYN, d_tmp_tree_val_prediction)
#parameter
d_CART_pre_search_result[iter_cnt,1]=d_min_criterion[i]
d_CART_pre_search_result[iter_cnt,2]=d_min_split[j]
d_CART_pre_search_result[iter_cnt,3]=d_max_depth[k]
#confusion matrix
d_CART_pre_search_result[iter_cnt,4:9] <- perf_eval(d_tmp_tree_val_cm)
#AUROC
d_CART_pre_search_result[iter_cnt,10] <- unlist(performance(d_tmp_tree_val_rocr,"auc")@y.values)
#No of leaf nodes
d_CART_pre_search_result[iter_cnt,11] <- length(nodes(d_tmp_tree,unique(where(d_tmp_tree))))
iter_cnt =iter_cnt+1
}
}
}
#optimal parameter 찾기
#125개의 파라미터 조합 만들어주기
iter_cnt=1
for (i in 1:length(d_min_criterion)){
for(j in 1:length(d_min_split)){
for (k in 1:length(d_max_depth)){
cat("CART Min criterion:", d_min_criterion[i],",Min split:",
d_min_split[j], ",Max depth:", d_max_depth[k], "\n")
d_tmp_control=ctree_control(mincriterion = d_min_criterion[i],minsplit=d_min_split[j],maxdepth = d_max_depth[k])
d_tmp_tree <- ctree(diabetesYN ~., data=d_CART_trn, controls=d_tmp_control)
d_tmp_tree_val_prediction <- predict(d_tmp_tree, newdata=d_CART_val)
d_tmp_tree_val_response <- treeresponse(d_tmp_tree)
d_tmp_tree_val_prob <- 1-unlist(d_tmp_tree_val_response, use.names=F)[seq(1,nrow(d_CART_val)*2,2)]
d_tmp_tree_val_rocr <- prediction(d_tmp_tree_val_prob, d_CART_val$diabetesYN)
d_tmp_tree_val_cm <- table(d_CART_val$diabetesYN, d_tmp_tree_val_prediction)
#parameter
d_CART_pre_search_result[iter_cnt,1]=d_min_criterion[i]
d_CART_pre_search_result[iter_cnt,2]=d_min_split[j]
d_CART_pre_search_result[iter_cnt,3]=d_max_depth[k]
#confusion matrix
d_CART_pre_search_result[iter_cnt,4:9] <- perf_eval(d_tmp_tree_val_cm)
#AUROC
d_CART_pre_search_result[iter_cnt,10] <- unlist(performance(d_tmp_tree_val_rocr,"auc")@y.values)
#No of leaf nodes
d_CART_pre_search_result[iter_cnt,11] <- length(nodes(d_tmp_tree,unique(where(d_tmp_tree))))
iter_cnt =iter_cnt+1
}
}
}
#정렬시켜주기
d_CART_pre_search_result <- d_CART_pre_search_result[order(d_CART_pre_search_result[,10], decreasing=T),]
d_CART_pre_search_result
d_min_split <- c(5,15,35,55,70)
d_max_depth <- c(2,4,6,8,10)
d_CART_pre_search_result=matrix(0,length(d_min_criterion)*length(d_min_split)*length(d_max_depth),11)
colnames(d_CART_pre_search_result) <- c("min_criterion","min_split","max_detph","TPR","Precision",
"TNR","ACC","BCR","F1","AUROC","N_leaves")
#optimal parameter 찾기
#125개의 파라미터 조합 만들어주기
iter_cnt=1
for (i in 1:length(d_min_criterion)){
for(j in 1:length(d_min_split)){
for (k in 1:length(d_max_depth)){
cat("CART Min criterion:", d_min_criterion[i],",Min split:",
d_min_split[j], ",Max depth:", d_max_depth[k], "\n")
d_tmp_control=ctree_control(mincriterion = d_min_criterion[i],minsplit=d_min_split[j],maxdepth = d_max_depth[k])
d_tmp_tree <- ctree(diabetesYN ~., data=d_CART_trn, controls=d_tmp_control)
d_tmp_tree_val_prediction <- predict(d_tmp_tree, newdata=d_CART_val)
d_tmp_tree_val_response <- treeresponse(d_tmp_tree)
d_tmp_tree_val_prob <- 1-unlist(d_tmp_tree_val_response, use.names=F)[seq(1,nrow(d_CART_val)*2,2)]
d_tmp_tree_val_rocr <- prediction(d_tmp_tree_val_prob, d_CART_val$diabetesYN)
d_tmp_tree_val_cm <- table(d_CART_val$diabetesYN, d_tmp_tree_val_prediction)
#parameter
d_CART_pre_search_result[iter_cnt,1]=d_min_criterion[i]
d_CART_pre_search_result[iter_cnt,2]=d_min_split[j]
d_CART_pre_search_result[iter_cnt,3]=d_max_depth[k]
#confusion matrix
d_CART_pre_search_result[iter_cnt,4:9] <- perf_eval(d_tmp_tree_val_cm)
#AUROC
d_CART_pre_search_result[iter_cnt,10] <- unlist(performance(d_tmp_tree_val_rocr,"auc")@y.values)
#No of leaf nodes
d_CART_pre_search_result[iter_cnt,11] <- length(nodes(d_tmp_tree,unique(where(d_tmp_tree))))
iter_cnt =iter_cnt+1
}
}
}
#정렬시켜주기
d_CART_pre_search_result <- d_CART_pre_search_result[order(d_CART_pre_search_result[,10], decreasing=T),]
d_CART_pre_search_result
d_best_criterion <- d_CART_pre_search_result[1,1]
d_best_split <-d_CART_pre_search_result[1,2]
d_best_depth <- d_CART_pre_search_result[1,3]
#----Q4 pre pruned tree 구축
d_tree_control<- ctree_control(mincriterion=d_best_criterion,minsplit=d_best_split, maxdepth=d_best_depth)
d_CART_pre <- ctree(diabetesYN~., data=d_CART_trn, controls=d_tree_control)
summary(d_CART_pre)
#tree 그리기
plot(d_CART_pre)
text(d_CART_pre, type="simple")
CART_pre_a <- ctree(heartYN~., data=CART_trn_a, controls=tree_control)
CART_pre_cm <- table(CART_tst$heartYN, CART_prediction)
CART_pre_prediction <-predict(CART_pre, new_data=CART_tst)
CART_pre_cm <- table(CART_tst$heartYN, CART_prediction)
perf_table_post[3,(1:6)] <- perf_eval(CART_pre_cm)
CART_pre_prey <- predict(CART_pre, newdata=CART_tst)
perf_table_post[3,7] <- auroc(CART_pre_prey, CART_tst)
perf_table_post
summary(CART_pre_a)
#tree 그리기
plot(CART_pre_a)
text(CART_pre_a, type="simple")
perf_table_post[3,(1:6)] <- perf_eval(CART_pre_cm)
CART_pre_prey <- predict(CART_pre_a, newdata=CART_tst)
perf_table_post[3,7] <- auroc(CART_pre_prey, CART_tst)
perf_table_post
summary(CART_pre_a)
#tree 그리기
plot(CART_pre_a)
text(CART_pre_a, type="simple")
#------Q5 validation과 train data 합쳐서 학습
#----Q5
#validation&train data 합쳐서 학습 후
d_CART_trn_a <- rbind(d_CART_trn, d_CART_val)
d_CART_pre_a <- ctree(diabetesYN~., data=d_CART_trn_a, controls=d_tree_control)
d_CART_pre_prediction <- predict(d_CART_pre, newdata=d_CART_tst)
d_CART_pre_cm <- table(d_CART_tst$diabetesYN, d_CART_prediction)
d_perf_table[3,(1:6)] <- perf_eval(d_CART_pre_cm)
d_CART_pre_prey <- predict(d_CART_pre, newdata=d_CART_tst)
perf_table_post[3,7] <- auroc(d_CART_pre_prey,d_CART_tst)
perf_table_post
d_perf_table
#------Q5 validation과 train data 합쳐서 학습
#----Q5
#validation&train data 합쳐서 학습 후
d_CART_trn_a <- rbind(d_CART_trn, d_CART_val)
d_CART_pre_a <- ctree(diabetesYN~., data=d_CART_trn_a, controls=d_tree_control)
d_CART_pre_prediction <- predict(d_CART_pre, newdata=d_CART_tst)
d_CART_pre_cm <- table(d_CART_tst$diabetesYN, d_CART_prediction)
d_CART_pre_cm <- table(d_CART_tst$diabetesYN, d_CART_pre_prediction)
d_perf_table[3,(1:6)] <- perf_eval(d_CART_pre_cm)
d_perf_table
d_perf_table[3,7] <- auroc(d_CART_pre_prey,d_CART_tst)
d_CART_pre_prey <- predict(d_CART_pre_a, newdata=d_CART_tst)
d_perf_table[3,7] <- auroc(d_CART_pre_prey,d_CART_tst)
d_CART_pre_prey <- predict(d_CART_pre_a, newdata=d_CART_tst)
d_perf_table[3,7] <- auroc(d_CART_pre_prey,d_CART_tst)
d_CART_pre_a <- ctree(diabetesYN~., data=d_CART_trn_a, controls=d_tree_control)
d_CART_pre_prediction <- predict(d_CART_pre_a, newdata=d_CART_tst)
d_CART_pre_cm <- table(d_CART_tst$diabetesYN, d_CART_pre_prediction)
d_perf_table[3,(1:6)] <- perf_eval(d_CART_pre_cm)
d_CART_pre_prey <- predict(d_CART_pre_a, newdata=d_CART_tst)
d_perf_table[3,7] <- auroc(d_CART_pre_prey,d_CART_tst)
CART_pre_a <- ctree(heartYN~., data=CART_trn_a, controls=tree_control)
CART_pre_prediction <-predict(CART_pre_a, new_data=CART_tst)
CART_pre_prediction <-predict(CART_pre_a, new_data=CART_tst)
CART_pre_cm <- table(CART_tst$heartYN, CART_pre_prediction)
#----Q5
#validation&train data 합쳐서 학습 후
CART_trn_a <- rbind(CART_trn, CART_val)
CART_pre_a <- ctree(heartYN~., data=CART_trn_a, controls=tree_control)
CART_pre_prediction <-predict(CART_pre_a, new_data=CART_tst)
CART_pre_cm <- table(CART_tst$heartYN, CART_pre_prediction)
CART_pre_a <- ctree(heartYN~., data=CART_trn_a, controls=tree_control)
CART_pre_prediction <-predict(CART_pre_a, new_data=CART_tst)
CART_pre_cm <- table(CART_tst$heartYN, CART_pre_prediction)
CART_pre_cm
perf_table_post
perf_eval(CART_pre_cm)
perf_tagle_post[3,(1:6)]
perf_table_post[3,(1:6)]
perf_table_post[3,(1:6)] <- perf_eval(CART_pre_cm)
perf_table_post[3,(1:6)] <- perf_eval(CART_pre_cm)
CART_pre_prey <- predict(CART_pre_a, newdata=CART_tst)
perf_table_post[3,7] <- auroc(CART_pre_prey, CART_tst)
perf_table_post
#------Q5 validation과 train data 합쳐서 학습
#----Q5
#validation&train data 합쳐서 학습 후
d_CART_trn_a <- rbind(d_CART_trn, d_CART_val)
d_CART_pre_a <- ctree(diabetesYN~., data=d_CART_trn_a, controls=d_tree_control)
d_CART_pre_prediction <- predict(d_CART_pre_a, newdata=d_CART_tst)
d_CART_pre_cm <- table(d_CART_tst$diabetesYN, d_CART_pre_prediction)
d_perf_table[3,(1:6)] <- perf_eval(d_CART_pre_cm)
d_CART_pre_prey <- predict(d_CART_pre_a, newdata=d_CART_tst)
d_perf_table[3,7] <- auroc(d_CART_pre_prey,d_CART_tst)
d_perf_table[3,7] <- d_auroc(d_CART_pre_prey,d_CART_tst)
d_perf_table
d_CART_pre_response <- treeresponse(d_CART_pre_a, newdata=d_CART_tst)
d_CART_pre_prob <- 1-unlist(d_CART_pre_response, use.names = F)[seq(1,nrow(d_CART_tst)*2,2)]
d_CART_pre_rocr <- prediction(d_CART_pre_prob, d_CARt_tst$diabetes_target)
d_CART_pre_rocr <- prediction(d_CART_pre_prob, d_CART_tst$diabetes_target)
d_CART_pre_prob <- 1-unlist(d_CART_pre_response, use.names = F)[seq(1,nrow(d_CART_tst)*2,2)]
d_CART_pre_rocr <- prediction(d_CART_pre_prob, d_CART_tst$diabetes_target)
d_CART_pre_rocr <- prediction(d_CART_pre_prob, d_CART_tst$diabetesYN)
d_CART_pre_rocr
d_CART_pre_rocr
a<-unlist(d_CART_pre_rocr, "auc")@y.values
a<-unlist(d_CART_pre_rocr, "auc")@y.values)
a<-unlist(performance(d_CART_pre_rocr, "auc")@y.values)
a
d_perf_table[3,7]<-unlist(performance(d_CART_pre_rocr, "auc")@y.values)
d_perf_table
plot(d_CART_perf, col=5, lwd=3)
d_auroc_bpost <- unlist(performance(d_CART_bpost_rocr, "auc")@y.values)
d_perf_table[1, 7] <- d_auroc_bpost
d_perf_table
d_auroc_post <- unlist(performance(d_CART_post_rocr, "auc")@y.values)
d_perf_table[1, 7] <- d_auroc_post
d_perf_table
#ROC curve 구축
d_CART_post_response <- predict(d_CART_post_pruned, newdata=d_CART_tst, type="vector")
d_CART_post_response <- d_CART_post_response[,1]
d_CART_post_prob <- 1-unlist(d_CART_post_response, use.names=F)[seq(1,nrow(d_CART_tst),1)]
d_CART_post_rocr <- prediction(d_CART_post_prob, d_CART_tst$diabetesYN)
d_CART_perf <- performance(d_CART_post_rocr, "tpr","fpr")
plot(d_CART_perf, col=5, lwd=3)
d_auroc_post <- unlist(performance(d_CART_post_rocr, "auc")@y.values)
d_perf_table[1, 7] <- d_auroc_post
d_perf_table
#tree 그리기
heart_CART_pre <- ctree(heart_target ~ ., data = heart_newtrn_data, controls = tree_control)
plot(heart_CART_pre, type = 'simple')
heart_CART_pre_prediction <- predict(heart_CART_pre, newdata = heart_tst)
heart_CART_pre_response <- treeresponse(heart_CART_pre, newdata = heart_tst)
heart_pre_cm <- table(heart_tst$heart_target, heart_CART_pre_prediction)
heart_pre_cm
perf_mat_heart[3,1:6] <- perf_eval(heart_pre_cm)
heart_CART_pre_prob <- 1-unlist(heart_CART_pre_response, use.names = F)[seq(1,nrow(heart_tst)*2,2)]
heart_CART_pre_rocr <- prediction(heart_CART_pre_prob, heart_tst$heart_target)
heart_CART_pre_perf <- performance(heart_CART_pre_rocr, "tpr", "fpr")
d_CART_pre_prey <- predict(d_CART_pre_a, newdata=d_CART_tst)
d_CART_pre_response <- treeresponse(d_CART_pre_a, newdata=d_CART_tst)
d_CART_pre_prob <- 1-unlist(d_CART_pre_response, use.names = F)[seq(1,nrow(d_CART_tst)*2,2)]
d_CART_pre_rocr <- prediction(d_CART_pre_prob, d_CART_tst$diabetesYN)
d_auroc_pre <- unlist(performance(d_CART_post_rocr, "auc")@y.values)
d_perf_table[3, 7] <- d_auroc_pre
d_perf_table
summary(CART_pre_a)
#tree 그리기
plot(d_CART_pre_a)
text(d_CART_pre_a, type="simple")
d_CART_pre_cm
d_CART_perf <- performance(d_CART_pre_rocr, "tpr", "fpr")
plot(d_CART_perf, col=5, lwd=3)
#-----------Q6
#Data set 1과 2의 통합 성능평가지표
perf_table <- matrix(0, nrow=4, ncol=5)
rownames(perf_table) <- c("Heart-Logistic Regression","Heart-Decision Tree","Diabetes-Logistic Regression", "Diabetes-Decision Tree")
colnames(perf_table) <- c("TPR","TNR", "Accuracy", "BCR", "F1-Measure")
perf_table[2,] <- perf_eval(CART_bpost_cm)[c(1,3,4,5,6)]
perf_table
perf_table[2,4] <- per_eval(d_CART_bpost_cm)[c1,3,4,5,6)]
perf_table[4,] <- per_eval(d_CART_bpost_cm)[c1,3,4,5,6)]
perf_table[4,] <- perf_eval(d_CART_bpost_cm)[c1,3,4,5,6)]
perf_table[4,] <- perf_eval(d_CART_bpost_cm)[c(1,3,4,5,6)]
perf_table
#----"HEART" ------logistic Regression 실행
full_lr <- glm (heartYN ~., family=binomial, CART_trn)
#Test the model and evaluation
lr_response <- predict(full_lr, type="response", newdata=CART_tst)
lr_target <- CART_tst$heartYN
lr_predicted <- rep(0, length(lr_target))
lr_predicted[which(lr_response >=0.5)] <- 1
cm_full <- table(lr_target, lr_predicted)
cm_full
perf_eval(cm_full)
perf_table[3,] <- perf_eval(cm_full)[c(1,3,4,5,6)]
perf_table
perf_table[1,] <- perf_eval(cm_full)[c(1,3,4,5,6)]
perf_table[3,] <-0
perf_table
#----"Diabetes" ------logistic Regression 실행
d_full_lr <- glm (diabetesYN ~., family=binomial, d_CART_trn)
#Test the model and evaluation
d_lr_response <- predict(d_full_lr, type="response", newdata=d_CART_tst)
d_lr_target <- d_CART_tst$diabetesYN
d_lr_predicted <- rep(0, length(d_lr_target))
d_lr_predicted[which(d_lr_response >=0.5)] <- 1
d_cm_full <- table(d_lr_target, d_lr_predicted)
perf_table[1,] <- perf_eval(cm_full)[c(1,3,4,5,6)]
perf_table
perf_table
perf_table[3,] <- perf_eval(d_cm_full)[c(1,3,4,5,6)]
perf_table
CART_bpost_cm
cm_full
d_CART_bpost
d_CART_bpost_cm
d_cm_full
CART_bpost_cm
cm_full
d_CART_bpost_cm
d_cm_full
#Prunning 하기 전 예측
d_CART_bpost_prey <- predict(d_CART_bpost, d_CART_tst,type="class")
d_CART_bpost_cm <- table(d_CART_tst$diabetesYN, d_CART_bpost_prey)
d_CART_bpost_cm
d_cm_full <- table(d_lr_target, d_lr_predicted)
d_cm_full
d_cm_full <- table(d_lr_target, d_lr_predicted)
perf_table[3,] <- perf_eval(d_cm_full)[c(1,3,4,5,6)]
perf_table
#Test the model and evaluation
d_lr_response <- predict(d_full_lr, type="response", newdata=d_CART_tst)
d_lr_target <- d_CART_tst$diabetesYN
d_lr_predicted <- rep(0, length(d_lr_target))
d_lr_predicted[which(d_lr_response >=0.5)] <- 1
d_cm_full <- table(d_lr_target, d_lr_predicted)
perf_table[3,] <- perf_eval(d_cm_full)[c(1,3,4,5,6)]
perf_table
d_CART_bpost_cm
d_cm_full
#Q7 변수들 비교
summary(full_lr)
summary(d_full_lr)
CART_b_post
CART_bpost
summary(CART_bpost)
summary(CART_bpost)
summary(d_CART_bpost)
